(module Axel.Parse.Args)

(importq Axel.Parse.AST AST all)

(import Data.Semigroup (<>))

(import Options.Applicative (Parser argument command info metavar progDesc str subparser))

-- PRELUDE_BEGIN
(macro quasiquote ([(AST.SExpression xs)])
       (let ((quasiquoteElem (\ (x) (case x
                                      ((AST.SExpression ['unquote x])
                                       (AST.SExpression ['list x]))
                                      ((AST.SExpression ['unquoteSplicing x])
                                       (AST.SExpression ['AST.toExpressionList x]))
                                      (atom
                                       (AST.SExpression
                                        ['list
                                         (AST.SExpression ['quasiquote atom])]))))))
         (pure [(AST.SExpression ['AST.SExpression (AST.SExpression ['concat (AST.SExpression (: 'list (map quasiquoteElem xs)))])])])))
(macro quasiquote ([atom])
       (pure [(AST.SExpression ['quote atom])]))

(macro applyInfix ([x op y])
       (pure [`(~op ~x ~y)]))

(macro fnCase (cases)
       (<$> (\ (varId)
             [`(\ (~varId) (case ~varId ~@cases))])
            AST.gensym))

(macro def ({name : {typeSig : cases}})
       (pure
        (: `(:: ~name ~typeSig)
           (map (\ (x) `(= ~name ~@x))
                cases))))

(def mdo' {(List AST.Expression) -> AST.Expression}
  (({var : {'<- : {val : rest}}})
   `(>>= ~val (\ (~var) ~(mdo' rest))))
  (((: val rest))
   (case rest
     ([]
      val)
     (_
      `(>> ~val ~(mdo' rest))))))

(macro mdo (input)
       (pure [(mdo' input)]))

(macro if ([cond true false])
       (pure [`(case ~cond
                 (True ~true)
                 (False ~false))]))
-- PRELUDE_END

(data Command
  (File FilePath)
  (Project)
  (Version))

(def commandParser (Parser Command)
  (() (subparser {projectCommand <> {fileCommand <> versionCommand}})
   (= fileCommand ()
     (command "file"
               (info {File <$> (argument str (metavar "FILE"))}
                     (progDesc "Build and run a single file"))))
   (= projectCommand ()
     (command "project"
               (info (pure Project)
                     (progDesc "Build and run the project"))))
   (= versionCommand ()
     (command "version"
               (info (pure Version)
                     (progDesc "Display the version of the Axel compiler"))))))
