(module Axel.Haskell.Macros)

(import Axel.Prelude all)
(import Axel.Haskell.Language
        (haskellOperatorSymbols haskellSyntaxSymbols isOperator))
(importq Axel.Parse Parse (syntaxSymbols))
(import Data.List (foldl'))
(import Data.MonoTraversable (onotElem))
(importq Data.Text T all)

(def hygenisizeMacroName {Text -> Text}
     ((oldName)
      (let ((suffix
             (if (isOperator oldName) "%%%%%%%%%%"
                                      "_AXEL_AUTOGENERATED_MACRO_DEFINITION"))
            (suffixedName
             (if {suffix T.isSuffixOf oldName} oldName {oldName <> suffix}))
            (symbolReplacementMap
             (if (isOperator oldName)
                 haskellSyntaxSymbols
                 {haskellSyntaxSymbols <> haskellOperatorSymbols})))
           (foldl'
            (\ (acc {old , new}) (T.replace (T.singleton old) new acc))
            suffixedName
            (filter (\ ({sym , _}) {sym onotElem Parse.syntaxSymbols})
                    symbolReplacementMap)))))
