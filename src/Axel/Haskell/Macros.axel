(pragma "LANGUAGE OverloadedStrings")

(module Axel.Haskell.Macros)

(importm Axel (applyInfix def))

(import Axel.Haskell.Language (haskellOperatorSymbols haskellSyntaxSymbols isOperator))
(importq Axel.Parse Parse (syntaxSymbols))

(import Data.List (foldl'))
(importq Data.Text T (isSuffixOf pack replace singleton unpack))

(def hygenisizeMacroName {String -> String}
  ((oldName)
   (let ((suffix
          (if (isOperator oldName)
            "%%%%%%%%%%"
            "_AXEL_AUTOGENERATED_MACRO_DEFINITION"))
         (suffixedName
          (if {(T.pack suffix) T.isSuffixOf (T.pack oldName)}
            oldName
            {oldName <> suffix})))
     (T.unpack (foldl' (\ (acc {old , new}) (T.replace (T.singleton old) (T.pack new) acc))
                       (T.pack suffixedName)
                       (filter (\ ({sym , _}) {sym notElem Parse.syntaxSymbols})
                               {haskellSyntaxSymbols <> haskellOperatorSymbols}))))))
