{-# LANGUAGE OverloadedStrings #-}

module Axel.Haskell.Macros where

import Axel.Haskell.Language
  ( haskellOperatorSymbols
  , haskellSyntaxSymbols
  , isOperator
  )
import qualified Axel.Parse as Parse (syntaxSymbols)

import Data.List (foldl')
import qualified Data.Text as T (isSuffixOf, pack, replace, singleton, unpack)

hygenisizeMacroName :: String -> String
hygenisizeMacroName oldName =
  let suffix =
        if isOperator oldName
          then "%%%%%%%%%%"
          else "_AXEL_AUTOGENERATED_MACRO_DEFINITION"
      suffixedName =
        if T.pack suffix `T.isSuffixOf` T.pack oldName
          then oldName
          else oldName <> suffix
   in T.unpack $
      foldl'
        (\acc (old, new) -> T.replace (T.singleton old) (T.pack new) acc)
        (T.pack suffixedName)
        (filter
           (\(sym, _) -> sym `notElem` Parse.syntaxSymbols)
           (haskellSyntaxSymbols <> haskellOperatorSymbols))
