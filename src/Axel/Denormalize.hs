module Axel.Denormalize where

import Axel.AST
  ( Expression(ECaseBlock, EEmptySExpression, EFunctionApplication,
           EIdentifier, EIfBlock, ELambda, ELetBlock, ELiteral,
           ERawExpression, ERecordDefinition, ERecordType)
  , Import(ImportItem, ImportType)
  , ImportSpecification(ImportAll, ImportOnly)
  , Literal(LChar, LInt, LString)
  , Statement(SDataDeclaration, SFunctionDefinition, SMacroDefinition,
          SMacroImport, SModuleDeclaration, SNewtypeDeclaration, SPragma,
          SQualifiedImport, SRawStatement, SRestrictedImport, STopLevel,
          STypeSignature, STypeSynonym, STypeclassDefinition,
          STypeclassInstance, SUnrestrictedImport)
  , TopLevel(TopLevel)
  , TypeDefinition(ProperType, TypeConstructor)
  , alias
  , arguments
  , bindings
  , body
  , cond
  , constraints
  , constructor
  , constructors
  , definition
  , definitions
  , expr
  , fields
  , function
  , functionDefinition
  , ifFalse
  , ifTrue
  , imports
  , instanceName
  , matches
  , moduleName
  , name
  , pragmaSpecification
  , signatures
  , typeDefinition
  , whereBindings
  )
import qualified Axel.Parse as Parse
  ( Expression(LiteralChar, LiteralInt, LiteralString, SExpression,
           Symbol)
  , SourceMetadata(AutoGenerated)
  )
import qualified Axel.Sourcemap as SM (Expression)

import Control.Lens.Operators ((^.))

denormalizeExpression :: Expression () -> SM.Expression
denormalizeExpression (ECaseBlock caseBlock) =
  let denormalizedCases =
        map
          (\(pat, res) ->
             Parse.SExpression
               Parse.AutoGenerated
               [denormalizeExpression pat, denormalizeExpression res])
          (caseBlock ^. matches)
   in Parse.SExpression Parse.AutoGenerated $
      Parse.Symbol Parse.AutoGenerated "case" :
      denormalizeExpression (caseBlock ^. expr) :
      denormalizedCases
denormalizeExpression (EEmptySExpression ()) =
  Parse.SExpression Parse.AutoGenerated []
denormalizeExpression (EFunctionApplication functionApplication) =
  Parse.SExpression Parse.AutoGenerated $
  denormalizeExpression (functionApplication ^. function) :
  map denormalizeExpression (functionApplication ^. arguments)
denormalizeExpression (EIdentifier () x) = Parse.Symbol Parse.AutoGenerated x
denormalizeExpression (EIfBlock ifBlock) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "if"
    , denormalizeExpression (ifBlock ^. cond)
    , denormalizeExpression (ifBlock ^. ifTrue)
    , denormalizeExpression (ifBlock ^. ifFalse)
    ]
denormalizeExpression (ELambda lambda) =
  let denormalizedArguments =
        Parse.SExpression Parse.AutoGenerated $
        map denormalizeExpression (lambda ^. arguments)
   in Parse.SExpression
        Parse.AutoGenerated
        [ Parse.Symbol Parse.AutoGenerated "\\"
        , denormalizedArguments
        , denormalizeExpression (lambda ^. body)
        ]
denormalizeExpression (ELetBlock letBlock) =
  let denormalizedBindings =
        Parse.SExpression Parse.AutoGenerated $
        map
          (\(var, val) ->
             Parse.SExpression
               Parse.AutoGenerated
               [denormalizeExpression var, denormalizeExpression val])
          (letBlock ^. bindings)
   in Parse.SExpression
        Parse.AutoGenerated
        [ Parse.Symbol Parse.AutoGenerated "let"
        , denormalizedBindings
        , denormalizeExpression (letBlock ^. body)
        ]
denormalizeExpression (ELiteral x) =
  case x of
    LChar () char -> Parse.LiteralChar Parse.AutoGenerated char
    LInt () int -> Parse.LiteralInt Parse.AutoGenerated int
    LString () string -> Parse.LiteralString Parse.AutoGenerated string
denormalizeExpression (ERawExpression () rawSource) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "raw"
    , Parse.LiteralString Parse.AutoGenerated rawSource
    ]
denormalizeExpression (ERecordDefinition recordDefinition) =
  let denormalizedBindings =
        map
          (\(var, val) ->
             Parse.SExpression
               Parse.AutoGenerated
               [Parse.Symbol Parse.AutoGenerated var, denormalizeExpression val])
          (recordDefinition ^. bindings)
   in Parse.SExpression
        Parse.AutoGenerated
        (Parse.Symbol Parse.AutoGenerated "record" : denormalizedBindings)
denormalizeExpression (ERecordType recordType) =
  let denormalizedFields =
        map
          (\(field, ty) ->
             Parse.SExpression
               Parse.AutoGenerated
               [ Parse.Symbol Parse.AutoGenerated field
               , denormalizeExpression ty
               ])
          (recordType ^. fields)
   in Parse.SExpression
        Parse.AutoGenerated
        (Parse.Symbol Parse.AutoGenerated "recordType" : denormalizedFields)

denormalizeImportSpecification :: ImportSpecification () -> SM.Expression
denormalizeImportSpecification (ImportAll ()) =
  Parse.Symbol Parse.AutoGenerated "all"
denormalizeImportSpecification (ImportOnly _ importList) =
  Parse.SExpression Parse.AutoGenerated $ map denormalizeImport importList
  where
    denormalizeImport (ImportItem () item) =
      Parse.Symbol Parse.AutoGenerated item
    denormalizeImport (ImportType () type' items) =
      Parse.SExpression
        Parse.AutoGenerated
        (Parse.Symbol Parse.AutoGenerated type' :
         map (Parse.Symbol Parse.AutoGenerated) items)

denormalizeStatement :: Statement () -> SM.Expression
denormalizeStatement (SDataDeclaration dataDeclaration) =
  let denormalizedTypeDefinition =
        case dataDeclaration ^. typeDefinition of
          TypeConstructor () typeConstructor ->
            denormalizeExpression $ EFunctionApplication typeConstructor
          ProperType () properType ->
            Parse.Symbol Parse.AutoGenerated properType
   in Parse.SExpression
        Parse.AutoGenerated
        (Parse.Symbol Parse.AutoGenerated "data" : denormalizedTypeDefinition :
         map
           (denormalizeExpression . EFunctionApplication)
           (dataDeclaration ^. constructors))
denormalizeStatement (SFunctionDefinition fnDef) =
  Parse.SExpression Parse.AutoGenerated $ Parse.Symbol Parse.AutoGenerated "=" :
  Parse.Symbol Parse.AutoGenerated (fnDef ^. name) :
  Parse.SExpression
    Parse.AutoGenerated
    (map denormalizeExpression (fnDef ^. arguments)) :
  denormalizeExpression (fnDef ^. body) :
  map (denormalizeStatement . SFunctionDefinition) (fnDef ^. whereBindings)
denormalizeStatement (SMacroDefinition macroDef) =
  Parse.SExpression Parse.AutoGenerated $
  Parse.Symbol Parse.AutoGenerated "=macro" :
  Parse.Symbol Parse.AutoGenerated (macroDef ^. functionDefinition . name) :
  Parse.SExpression
    Parse.AutoGenerated
    (map denormalizeExpression (macroDef ^. functionDefinition . arguments)) :
  denormalizeExpression (macroDef ^. functionDefinition . body) :
  map
    (denormalizeStatement . SFunctionDefinition)
    (macroDef ^. functionDefinition . whereBindings)
denormalizeStatement (SMacroImport macroImport) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "importm"
    , Parse.Symbol Parse.AutoGenerated $ macroImport ^. moduleName
    , Parse.SExpression Parse.AutoGenerated $
      map (Parse.Symbol Parse.AutoGenerated) (macroImport ^. imports)
    ]
denormalizeStatement (SModuleDeclaration () identifier) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "module"
    , Parse.Symbol Parse.AutoGenerated identifier
    ]
denormalizeStatement (SNewtypeDeclaration newtypeDeclaration) =
  let denormalizedTypeDefinition =
        case newtypeDeclaration ^. typeDefinition of
          TypeConstructor () typeConstructor ->
            denormalizeExpression $ EFunctionApplication typeConstructor
          ProperType () properType ->
            Parse.Symbol Parse.AutoGenerated properType
   in Parse.SExpression
        Parse.AutoGenerated
        [ Parse.Symbol Parse.AutoGenerated "newtype"
        , denormalizedTypeDefinition
        , denormalizeExpression $
          EFunctionApplication (newtypeDeclaration ^. constructor)
        ]
denormalizeStatement (SPragma pragma) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "pragma"
    , Parse.LiteralString Parse.AutoGenerated (pragma ^. pragmaSpecification)
    ]
denormalizeStatement (SQualifiedImport qualifiedImport) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "importq"
    , Parse.Symbol Parse.AutoGenerated $ qualifiedImport ^. moduleName
    , Parse.Symbol Parse.AutoGenerated $ qualifiedImport ^. alias
    , denormalizeImportSpecification (qualifiedImport ^. imports)
    ]
denormalizeStatement (SRawStatement () rawSource) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "raw"
    , Parse.LiteralString Parse.AutoGenerated rawSource
    ]
denormalizeStatement (SRestrictedImport restrictedImport) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "import"
    , Parse.Symbol Parse.AutoGenerated $ restrictedImport ^. moduleName
    , denormalizeImportSpecification (restrictedImport ^. imports)
    ]
denormalizeStatement (STopLevel (TopLevel () statements)) =
  Parse.SExpression Parse.AutoGenerated $
  Parse.Symbol Parse.AutoGenerated "begin" :
  map denormalizeStatement statements
denormalizeStatement (STypeclassDefinition typeclassDefinition) =
  Parse.SExpression
    Parse.AutoGenerated
    (Parse.Symbol Parse.AutoGenerated "class" :
     Parse.SExpression
       Parse.AutoGenerated
       (Parse.Symbol Parse.AutoGenerated "list" :
        map denormalizeExpression (typeclassDefinition ^. constraints)) :
     denormalizeExpression (typeclassDefinition ^. name) :
     map
       (denormalizeStatement . STypeSignature)
       (typeclassDefinition ^. signatures))
denormalizeStatement (STypeclassInstance typeclassInstance) =
  Parse.SExpression
    Parse.AutoGenerated
    (Parse.Symbol Parse.AutoGenerated "instance" :
     denormalizeExpression (typeclassInstance ^. instanceName) :
     map
       (denormalizeStatement . SFunctionDefinition)
       (typeclassInstance ^. definitions))
denormalizeStatement (STypeSignature typeSig) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "::"
    , Parse.Symbol Parse.AutoGenerated (typeSig ^. name)
    , denormalizeExpression (typeSig ^. typeDefinition)
    ]
denormalizeStatement (STypeSynonym typeSynonym) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "type"
    , denormalizeExpression (typeSynonym ^. alias)
    , denormalizeExpression (typeSynonym ^. definition)
    ]
denormalizeStatement (SUnrestrictedImport () identifier) =
  Parse.SExpression
    Parse.AutoGenerated
    [ Parse.Symbol Parse.AutoGenerated "importUnrestricted"
    , Parse.Symbol Parse.AutoGenerated identifier
    ]
