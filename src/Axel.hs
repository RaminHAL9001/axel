{-# OPTIONS_GHC -Wno-incomplete-patterns #-}
module Axel where
import qualified Axel.Parse.AST as AST
import Control.Lens.Cons(snoc)
expandDo' ((:) var ((:) (AST.Symbol (AST.FromSource (AST.SourcePosition 73 14)) "<-") ((:) val rest))) = (AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) ">>=")],[val],[(AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "\\")],[(AST.SExpression AST.AutoGenerated (concat [[var]]))],[(expandDo' rest)]]))]]))
expandDo' ((:) val rest) = (case rest of {[] -> val;_ -> (AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) ">>")],[val],[(expandDo' rest)]]))})
expandDo' :: ((->) [(AST.Expression AST.SourceMetadata)] (AST.Expression AST.SourceMetadata))
quote_AXEL_AUTOGENERATED_MACRO_DEFINITION [x] = (pure [(AST.quoteParseExpression x)])
quasiquote_AXEL_AUTOGENERATED_MACRO_DEFINITION [(AST.SExpression ann xs)] = (let {quasiquoteElem = (\x -> (case x of {(AST.SExpression ann' [(AST.Symbol _ "unquote"),expr]) -> (AST.SExpression ann' [(AST.Symbol (AST.FromSource (AST.SourcePosition 15 65)) "list"),expr]);(AST.SExpression ann' [(AST.Symbol _ "unquoteSplicing"),expr]) -> (AST.SExpression ann' [(AST.Symbol (AST.FromSource (AST.SourcePosition 17 65)) "AST.toExpressionList"),expr]);atom -> (AST.SExpression ann [(AST.Symbol (AST.FromSource (AST.SourcePosition 20 44)) "list"),(AST.SExpression ann [(AST.Symbol (AST.FromSource (AST.SourcePosition 21 66)) "quasiquote"),atom])])}))} in (pure [(AST.SExpression ann [(AST.Symbol (AST.FromSource (AST.SourcePosition 23 21)) "AST.SExpression"),(AST.Symbol (AST.FromSource (AST.SourcePosition 23 38)) "AST.AutoGenerated"),(AST.SExpression ann [(AST.Symbol (AST.FromSource (AST.SourcePosition 25 23)) "concat"),(AST.SExpression ann ((:) (AST.Symbol (AST.FromSource (AST.SourcePosition 27 27)) "list") (map quasiquoteElem xs)))])])]))
quasiquote_AXEL_AUTOGENERATED_MACRO_DEFINITION [atom] = (pure [(AST.SExpression AST.AutoGenerated [(AST.Symbol (AST.FromSource (AST.SourcePosition 30 53)) "quote"),atom])])
applyInfix_AXEL_AUTOGENERATED_MACRO_DEFINITION [x,op,y] = (pure [(AST.SExpression AST.AutoGenerated (concat [[op],[x],[y]]))])
defmacro_AXEL_AUTOGENERATED_MACRO_DEFINITION ((:) name cases) = (pure (map (\(AST.SExpression _ ((:) args body)) -> (AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "=macro")],[name],[(AST.SExpression AST.AutoGenerated (concat [[args]]))],(AST.toExpressionList body)]))) cases))
def_AXEL_AUTOGENERATED_MACRO_DEFINITION ((:) name ((:) typeSig cases)) = (pure (snoc (map (\x -> (AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "=")],[name],(AST.toExpressionList x)]))) cases) (AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "::")],[name],[typeSig]]))))
axelSymbolBackslashcase_AXEL_AUTOGENERATED_MACRO_DEFINITION cases = (fmap (\varId -> [(AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "\\")],[(AST.SExpression AST.AutoGenerated (concat [[varId]]))],[(AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "case")],[varId],(AST.toExpressionList cases)]))]]))]) AST.gensym)
syntaxPattern_AXEL_AUTOGENERATED_MACRO_DEFINITION [pattern] = (pure [(AST.bottomUpFmap (\expr -> (case expr of {(AST.SExpression _ [(AST.Symbol ann fnConstructor),_,x]) -> if (elem fnConstructor exprConstructors) then (AST.SExpression AST.AutoGenerated (concat [[(AST.Symbol ann fnConstructor)],[(AST.Symbol (AST.FromSource (AST.SourcePosition 1 2)) "_")],[x]])) else expr;_ -> expr})) pattern)]) where {exprConstructors  = ["AST.LiteralChar","AST.LiteralInt","AST.LiteralString","AST.SExpression","AST.Symbol"];wildcard  = (AST.Symbol AST.AutoGenerated "_")}
do'_AXEL_AUTOGENERATED_MACRO_DEFINITION input = (pure [(expandDo' input)])
quote_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
quasiquote_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
applyInfix_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
defmacro_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
def_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
axelSymbolBackslashcase_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
syntaxPattern_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))
do'_AXEL_AUTOGENERATED_MACRO_DEFINITION :: ((->) ([] (AST.Expression AST.SourceMetadata)) (IO ([] (AST.Expression AST.SourceMetadata))))