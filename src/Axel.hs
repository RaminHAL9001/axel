{-# OPTIONS_GHC -Wno-incomplete-patterns #-}

module Axel where

import qualified Axel.Parse.AST as AST
import qualified Axel.Sourcemap as SM
import Axel.Utils.Recursion (bottomUpFmap)
import Control.Lens.Cons (snoc)
import Data.IORef (IORef, modifyIORef, newIORef, readIORef)
import System.IO.Unsafe (unsafePerformIO)

preludeMacros :: ([] String)
preludeMacros = ["applyInfix", "defmacro", "def", "\\case", "syntaxPattern"]

{-# NOINLINE gensymCounter #-}
gensymCounter :: (IORef Int)
gensymCounter = (unsafePerformIO (newIORef 0))

gensym :: IO SM.Expression
gensym = do
  suffix <- readIORef gensymCounter
  let identifier = "aXEL_AUTOGENERATED_IDENTIFIER_" <> show suffix
  modifyIORef gensymCounter succ
  pure $ AST.Symbol Nothing identifier

applyInfix_AXEL_AUTOGENERATED_MACRO_DEFINITION [x, op, y] =
  (pure [(AST.SExpression Nothing (concat [[op], [x], [y]]))])

defmacro_AXEL_AUTOGENERATED_MACRO_DEFINITION ((:) name cases) =
  (pure
     (map
        (\(AST.SExpression _ ((:) args body)) ->
           (AST.SExpression
              Nothing
              (concat
                 [ [(AST.Symbol (Just (SM.SourcePosition 1 2)) "=macro")]
                 , [name]
                 , [(AST.SExpression Nothing (concat [[args]]))]
                 , (AST.toExpressionList body)
                 ])))
        cases))

def_AXEL_AUTOGENERATED_MACRO_DEFINITION ((:) name ((:) typeSig cases)) =
  (pure
     (snoc
        (map
           (\x ->
              (AST.SExpression
                 Nothing
                 (concat
                    [ [(AST.Symbol (Just (SM.SourcePosition 1 2)) "=")]
                    , [name]
                    , (AST.toExpressionList x)
                    ])))
           cases)
        (AST.SExpression
           Nothing
           (concat
              [ [(AST.Symbol (Just (SM.SourcePosition 1 2)) "::")]
              , [name]
              , [typeSig]
              ]))))

aXEL_SYMBOL_BACKSLASH_case_AXEL_AUTOGENERATED_MACRO_DEFINITION cases =
  (fmap
     (\varId ->
        [ (AST.SExpression
             Nothing
             (concat
                [ [(AST.Symbol (Just (SM.SourcePosition 1 2)) "\\")]
                , [(AST.SExpression Nothing (concat [[varId]]))]
                , [ (AST.SExpression
                       Nothing
                       (concat
                          [ [(AST.Symbol (Just (SM.SourcePosition 1 2)) "case")]
                          , [varId]
                          , (AST.toExpressionList cases)
                          ]))
                  ]
                ]))
        ])
     gensym)

syntaxPattern_AXEL_AUTOGENERATED_MACRO_DEFINITION [pattern] =
  (pure
     [ (bottomUpFmap
          (\expr ->
             (case expr of
                (AST.SExpression _ [(AST.Symbol ann "quote"), x]) ->
                  (AST.SExpression
                     Nothing
                     [ AST.Symbol Nothing "<$"
                     , AST.Symbol Nothing "unit"
                     , (AST.SExpression
                          Nothing
                          (concat [[(AST.Symbol ann "quote")], [x]]))
                     ])
                _ -> expr))
          pattern)
     ])

applyInfix_AXEL_AUTOGENERATED_MACRO_DEFINITION ::
     ((->) ([] SM.Expression) (IO ([] SM.Expression)))
defmacro_AXEL_AUTOGENERATED_MACRO_DEFINITION ::
     ((->) ([] SM.Expression) (IO ([] SM.Expression)))
def_AXEL_AUTOGENERATED_MACRO_DEFINITION ::
     ((->) ([] SM.Expression) (IO ([] SM.Expression)))
aXEL_SYMBOL_BACKSLASH_case_AXEL_AUTOGENERATED_MACRO_DEFINITION ::
     ((->) ([] SM.Expression) (IO ([] SM.Expression)))
syntaxPattern_AXEL_AUTOGENERATED_MACRO_DEFINITION ::
     ((->) ([] SM.Expression) (IO ([] SM.Expression)))
