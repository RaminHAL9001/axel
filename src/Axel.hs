{-# OPTIONS_GHC -Wno-incomplete-patterns #-}
module Axel where
import qualified Axel.Parse.AST as AST
import qualified Axel.Parse.AST as AST
import qualified Axel.Sourcemap as SM
import Axel.Utils.Recursion(bottomUpFmap)
import Data.IORef(IORef,modifyIORef,newIORef,readIORef)
import System.FilePath(takeFileName)
import System.IO.Unsafe(unsafePerformIO)
import Control.Lens.Cons(snoc)
expandDo' ((:) (AST.SExpression _ [(AST.Symbol _ "<-"),var,val]) rest) = (AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 50 8))) (concat [[(AST.Symbol (Just ((,) "axelTemp/195c800427294e4683d35c74dbe17460/result.axel" (SM.Position 1 149))) ">>=")],[val],[(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 50 18))) (concat [[(AST.Symbol (Just ((,) "axelTemp/195c800427294e4683d35c74dbe17460/result.axel" (SM.Position 1 236))) "\\")],[(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 50 21))) (concat [[var]]))],[(expandDo' rest)]]))]]))
expandDo' ((:) (AST.SExpression _ ((:) (AST.Symbol _ "let") bindings)) rest) = (AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 52 8))) (concat [[(AST.Symbol (Just ((,) "axelTemp/195c800427294e4683d35c74dbe17460/result.axel" (SM.Position 2 153))) "let")],[(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 52 13))) (concat [(AST.toExpressionList bindings)]))],[(expandDo' rest)]]))
expandDo' ((:) val rest) = (case rest of {[] -> val;_ -> (AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 56 13))) (concat [[(AST.Symbol (Just ((,) "axelTemp/195c800427294e4683d35c74dbe17460/result.axel" (SM.Position 3 127))) ">>")],[val],[(expandDo' rest)]]))})
expandDo' :: ((->) ([] SM.Expression) SM.Expression)
gensymCounter  = (unsafePerformIO (newIORef 0))
gensymCounter :: (IORef Int)
{-# NOINLINE gensymCounter #-}
gensym  = ((>>=) (readIORef gensymCounter) (\suffix -> (let {identifier = ((<>) "aXEL_AUTOGENERATED_IDENTIFIER_" (show suffix))} in ((>>) (modifyIORef gensymCounter succ) (pure (AST.Symbol Nothing identifier))))))
gensym :: (IO SM.Expression)
isPrelude  = ((.) ((==) "Axel.axel") takeFileName)
isPrelude :: ((->) FilePath Bool)
preludeMacros  = ["applyInfix","defmacro","def","do'","\\case","syntaxPattern"]
preludeMacros :: ([] String)
applyInfix_AXEL_AUTOGENERATED_MACRO_DEFINITION [x,op,y] = (pure [(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 17 17))) (concat [[op],[x],[y]]))])
defmacro_AXEL_AUTOGENERATED_MACRO_DEFINITION ((:) name cases) = (pure (map (\(AST.SExpression _ ((:) args body)) -> (AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 22 55))) (concat [[(AST.Symbol (Just ((,) "src/Axel.axel" (SM.Position 22 56))) "=macro")],[name],[(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 22 69))) (concat [[args]]))],(AST.toExpressionList body)]))) cases))
def_AXEL_AUTOGENERATED_MACRO_DEFINITION ((:) name ((:) typeSig cases)) = (pure (snoc (map (\x -> (AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 30 32))) (concat [[(AST.Symbol (Just ((,) "axelTemp/eebc314459d64f3aba253e9d2a91dd93/result.axel" (SM.Position 1 141))) "=")],[name],(AST.toExpressionList x)]))) cases) (AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 32 20))) (concat [[(AST.Symbol (Just ((,) "axelTemp/eebc314459d64f3aba253e9d2a91dd93/result.axel" (SM.Position 1 262))) "::")],[name],[typeSig]]))))
syntaxPattern_AXEL_AUTOGENERATED_MACRO_DEFINITION [pattern] = (pure [(bottomUpFmap (\expr -> (case expr of {(AST.SExpression _ [(AST.Symbol _ "quote"),x]) -> (AST.quoteExpression (const (AST.Symbol Nothing "_")) x);_ -> expr})) pattern)])
do'_AXEL_AUTOGENERATED_MACRO_DEFINITION input = (pure [(expandDo' input)])
aXEL_SYMBOL_BACKSLASH_case_AXEL_AUTOGENERATED_MACRO_DEFINITION cases = (fmap (\varId -> [(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 75 15))) (concat [[(AST.Symbol (Just ((,) "axelTemp/fc44075c290a43339abd19ec68fde761/result.axel" (SM.Position 1 116))) "\\")],[(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 75 18))) (concat [[varId]]))],[(AST.SExpression (Just ((,) "src/Axel.axel" (SM.Position 75 27))) (concat [[(AST.Symbol (Just ((,) "axelTemp/fc44075c290a43339abd19ec68fde761/result.axel" (SM.Position 1 281))) "case")],[varId],(AST.toExpressionList cases)]))]]))]) gensym)
applyInfix_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
defmacro_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
def_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
syntaxPattern_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
do'_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
aXEL_SYMBOL_BACKSLASH_case_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]