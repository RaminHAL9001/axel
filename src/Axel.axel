(pragma "OPTIONS_GHC -Wno-incomplete-patterns")

(module Axel)

(importq Axel.Parse.AST AST all)
(importq Axel.Sourcemap SM all)
(import Axel.Utils.Recursion (bottomUpFmap))

(import Data.IORef (IORef modifyIORef newIORef readIORef))

(import System.FilePath (takeFileName))
(import System.IO.Unsafe (unsafePerformIO))

(import Control.Lens.Cons (snoc))

(=macro applyInfix ([x op y])
        (pure [`(~op ~x ~y)]))

-- Macros only ever take one argument, so we can reduce some redundancy.
(=macro defmacro ({name : cases})
        (pure
         (map (\ ((AST.SExpression _ {args : body})) `(=macro ~name (~args) ~@body))
              cases)))

-- The type signature must come after so that macro inside the function body
-- don't complain about the function not being defined.
(defmacro def
    ({name : {typeSig : cases}}
           (pure
            (snoc (map (\ (x) `(= ~name ~@x))
                       cases)
                  `(:: ~name ~typeSig)))))

(defmacro syntaxPattern
    ([pattern]
     (pure
      [(bottomUpFmap
        (\ (expr)
         (case expr
           ((AST.SExpression _ [(AST.Symbol _ "quote") x])
            (AST.quoteExpression (const (AST.Symbol Nothing "_")) x))
           (_ expr)))
        pattern)])))

-- TODO Create `syntaxCase`

-- TODO Rewrite with `syntaxCase`
(def expandDo' {([] SM.Expression) -> SM.Expression}
     (({(AST.SExpression _ [(AST.Symbol _ "<-") var val]) : rest})
      `(>>= ~val (\ (~var) ~(expandDo' rest))))
     (({(AST.SExpression _ {(AST.Symbol _ "let") : bindings}) : rest})
      `(let (~@bindings) ~(expandDo' rest)))
     (({val : rest})
      (case rest
        ([] val)
        (_ `(>> ~val ~(expandDo' rest))))))

(defmacro do'
    (input (pure [(expandDo' input)])))

(def gensymCounter (IORef Int)
     (() (unsafePerformIO (newIORef 0))))
(pragma "NOINLINE gensymCounter")

(def gensym (IO SM.Expression)
     (() (do'
          (<- suffix (readIORef gensymCounter))
          (let (identifier {"aXEL_AUTOGENERATED_IDENTIFIER_" <> (show suffix)}))
          (modifyIORef gensymCounter succ)
          (pure (AST.Symbol Nothing identifier)))))

(defmacro \case
    (cases
     (fmap (\ (varId)
            [`(\ (~varId) (case ~varId ~@cases))])
           gensym)))

-- TODO Automatically derive this somehow(?)
(def isPrelude {FilePath -> Bool}
     (()
      {(== "Axel.axel") . takeFileName}))

-- TODO Automatically generate this (wrap the whole file with a macro that finds all macro definitions and creates this list?)
(def preludeMacros ([] String) (() ["applyInfix" "defmacro" "def" "do'" "\\case" "syntaxPattern"]))
