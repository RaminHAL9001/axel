(pragma "OPTIONS_GHC -Wno-incomplete-patterns")

(module Axel)

(importq Axel.Parse.AST AST all)

(import Control.Lens.Cons (snoc))

(=macro quasiquote ([(AST.SExpression _ xs)])
        (let ((quasiquoteElem (\ (x) (case x
                                       ((AST.SExpression _ ['unquote expr])
                                        (AST.SExpression AST.AutoGenerated ['list expr]))
                                       ((AST.SExpression _ ['unquoteSplicing expr])
                                        (AST.SExpression AST.AutoGenerated ['AST.toExpressionList expr]))
                                       (atom
                                        (AST.SExpression AST.AutoGenerated
                                         ['list
                                          (AST.SExpression AST.AutoGenerated ['quasiquote atom])]))))))
          (pure [(AST.SExpression AST.AutoGenerated
                  ['AST.SExpression 'AST.AutoGenerated
                   (AST.SExpression AST.AutoGenerated
                    ['concat
                     (AST.SExpression AST.AutoGenerated
                      (: 'list
                         (map quasiquoteElem xs)))])])])))
(=macro quasiquote ([atom])
        (pure [(AST.SExpression AST.AutoGenerated ['quote atom])]))

(=macro applyInfix ([x op y])
        (pure [`(~op ~x ~y)]))

(=macro defmacro ({name : cases})
        (pure
         (map (\ (x) `(=macro ~name ~@x))
              cases)))

(defmacro def
  (({name : {typeSig : cases}})
   (pure
    (snoc (map (\ (x) `(= ~name ~@x))
               cases)
          `(:: ~name ~typeSig)))))

(defmacro fnCase
  ((cases)
   (<$> (\ (varId)
         [`(\ (~varId) (case ~varId ~@cases))])
        AST.gensym)))

(def expandDo' {[(AST.Expression AST.SourceMetadata)] -> (AST.Expression AST.SourceMetadata)}
  (({var : {'<- : {val : rest}}})
   `(>>= ~val (\ (~var) ~(expandDo' rest))))
  (((: val rest))
   (case rest
     ([]
      val)
     (_
      `(>> ~val ~(expandDo' rest))))))

(defmacro do'
  ((input) (pure [(expandDo' input)])))
