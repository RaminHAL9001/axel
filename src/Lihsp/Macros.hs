{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE LambdaCase #-}

module Lihsp.Macros where

import Control.Lens.Operators ((^.))
import Control.Monad.Except (MonadError, throwError)
import Control.Monad.IO.Class (MonadIO, liftIO)

import Data.List (foldl')
import Data.Semigroup ((<>))

import Lihsp.AST
  ( MacroDefinition
  , Statement(SMacroDefinition)
  , ToHaskell(toHaskell)
  , definitions
  , name
  )
import Lihsp.Error (Error(MacroError))
import Lihsp.Eval (evalSource)
import Lihsp.Normalize (denormalizeExpression)
import qualified Lihsp.Parse as Parse
  ( Expression(LiteralChar, LiteralInt, LiteralString, SExpression,
           Symbol)
  , parseProgram
  )
import Lihsp.Parse.AST (toLihsp)
import Lihsp.Utils.Recursion (Recursive(bottomUpTraverse))
import Lihsp.Utils.Resources (readDataFile)
import Lihsp.Utils.String (replace)

generateMacroProgram ::
     (MonadIO m) => MacroDefinition -> [Parse.Expression] -> m String
generateMacroProgram macroDefinition applicationArguments =
  (<>) <$> liftIO getFileHeader <*> liftIO getFileFooter
  where
    getFileHeader = readDataFile "autogenerated/macros/Header.hs"
    getFileFooter =
      let insertApplicationArguments =
            let applicationArgumentsPlaceholder = "%%%ARGUMENTS%%%"
            in replace
                 applicationArgumentsPlaceholder
                 (show applicationArguments)
          insertDefinitionBody =
            let definitionBodyPlaceholder = "%%%MACRO_DEFINITION%%%"
            in replace definitionBodyPlaceholder (toHaskell macroDefinition)
          insertDefinitionName =
            let definitionNamePlaceholder = "%%%MACRO_NAME%%%"
            in replace definitionNamePlaceholder (macroDefinition ^. name)
      in insertApplicationArguments .
         insertDefinitionName . insertDefinitionBody <$>
         readDataFile "macros/Footer.hs"

expandMacros ::
     (MonadError Error m, MonadIO m)
  => [MacroDefinition]
  -> Parse.Expression
  -> m Parse.Expression
expandMacros environment =
  bottomUpTraverse $ \expression ->
    case expression of
      Parse.LiteralChar _ -> return expression
      Parse.LiteralInt _ -> return expression
      Parse.LiteralString _ -> return expression
      Parse.SExpression [] -> return expression
      Parse.SExpression (function:args) ->
        lookupMacroDefinition environment function >>= \case
          Just macroDefinition ->
            head <$> expandMacroApplication macroDefinition args
          Nothing -> return expression -- TODO WAT
      Parse.Symbol _ -> return expression
  where
    expandMacroApplication macroDefinition args =
      generateMacroProgram macroDefinition args >>= evalSource >>=
      Parse.parseProgram

lookupMacroDefinition ::
     (MonadError Error m)
  => [MacroDefinition]
  -> Parse.Expression
  -> m (Maybe MacroDefinition)
lookupMacroDefinition environment identifierExpression =
  case identifierExpression of
    Parse.LiteralChar _ -> return Nothing
    Parse.LiteralInt _ -> return Nothing
    Parse.LiteralString _ -> return Nothing
    Parse.SExpression _ -> return Nothing
    Parse.Symbol identifier ->
      case filter
             (\macroDefinition -> macroDefinition ^. name == identifier)
             environment of
        [] -> return Nothing
        [macroDefinition] -> return $ Just macroDefinition
        _ -> throwError (MacroError "0012")

-- TODO This probably needs heavy optimization. If so, I will need to decrease the running time.
extractMacroDefinitions :: [Statement] -> [MacroDefinition]
extractMacroDefinitions =
  foldl'
    (\env statement ->
       case statement of
         SMacroDefinition macroDefinition ->
           let newEnv = macroDefinition : env
               isDependentOnNewEnv x =
                 any (`isDefinitionDependentOnMacro` x) newEnv
           in filter (not . isDependentOnNewEnv) newEnv
         _ -> env)
    []

isDefinitionDependentOnMacro :: MacroDefinition -> MacroDefinition -> Bool
isDefinitionDependentOnMacro needle haystack =
  let definitionBodies = map snd (haystack ^. definitions)
  in any
       (isExpressionDependentOnMacro needle)
       (map denormalizeExpression definitionBodies)

isExpressionDependentOnMacro :: MacroDefinition -> Parse.Expression -> Bool
isExpressionDependentOnMacro _ (Parse.LiteralChar _) = False
isExpressionDependentOnMacro _ (Parse.LiteralInt _) = False
isExpressionDependentOnMacro _ (Parse.LiteralString _) = False
isExpressionDependentOnMacro needle (Parse.SExpression xs) =
  any (isExpressionDependentOnMacro needle) xs
isExpressionDependentOnMacro needle (Parse.Symbol x) = x == needle ^. name
