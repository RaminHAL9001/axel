(importq Axel.Parse.AST AST all)

-- NOTE This will eventually be automatically defined by the Axel prelude.
(defmacro quasiquote
    (([(AST.SExpression xs)])
     (let ((quasiquoteElem (\ (x) (case x
                                   ((AST.SExpression ['unquote x])
                                    (AST.SExpression ['list x]))
                                   ((AST.SExpression ['unquoteSplicing x])
                                    x)
                                   (atom
                                    (AST.SExpression
                                     ['list
                                     (AST.SExpression ['quasiquote atom])]))))))
       (pure [(AST.SExpression ['AST.SExpression (AST.SExpression ['concat (AST.SExpression (: 'list (map quasiquoteElem xs)))])])])))
  (([atom]) (pure [(AST.SExpression ['quote atom])])))

-- NOTE This will eventually be automatically defined by the Axel prelude.
(defmacro fnCase
    ((cases) (<$> (\ (varId)
                    [`(\ (~varId) (case ~varId ~@cases))])
                  AST.gensym)))

(= mdo' (-> ([] AST.Expression) AST.Expression)
   (() (fnCase
        ((: var (: '<- (: val rest)))
         `(>>= ~val (\ (~var) ~(mdo' rest))))
        ((: val rest)
         (case rest
           ([]
            val)
           (_
            `(>> ~val ~(mdo' rest))))))))

-- NOTE This will eventually be automatically defined by the Axel prelude.
(defmacro mdo
    ((input)
     (pure [(mdo' input)])))

(= main (IO Unit)
   (() (mdo
        line <- getLine
        (putStrLn line)
        (pure unit))))
