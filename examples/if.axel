-- NOTE This will eventually be automatically defined by the Axel prelude.
(defmacro quasiquote
    (([(AST.SExpression xs)])
     (let ((quasiquoteElem (\ (x) (case x
                                   ((AST.SExpression ['unquote x])
                                    (AST.SExpression ['list x]))
                                   ((AST.SExpression ['unquoteSplicing x])
                                    x)
                                   (atom
                                    (AST.SExpression
                                     ['list
                                     (AST.SExpression ['quasiquote atom])]))))))
       (pure [(AST.SExpression ['AST.SExpression (AST.SExpression ['concat (AST.SExpression (: 'list (map quasiquoteElem xs)))])])])))
  (([atom]) (pure [(AST.SExpression ['quote atom])])))

-- NOTE This will eventually be automatically defined by the Axel prelude.
(defmacro if'
  (([cond true false])
   (pure [`(case ~cond
             (True ~true)
             (False ~false))])))

(= main (IO Unit)
  (() (putStrLn
       (if' (== 1 1) "Correct!" "Impossible..."))))