import Axel.Parse.AST as AST
import qualified Axel.Parse.AST as AST
import qualified Axel.Sourcemap as SM
assertEq expr expected = if ((==) ((<$) () expr) ((<$) () expected)) then (AST.SExpression (Just (SM.SourcePosition 1 73)) [(AST.Symbol (Just (SM.SourcePosition 1 73)) "raw"),(AST.LiteralString (Just (SM.SourcePosition 1 73)) "{- Passed! -}")]) else (error ((<>) (AST.toAxel expr) ((<>) " given, but " ((<>) (AST.toAxel expected) " expected!"))))
assertEq :: ((->) (AST.Expression a) ((->) (AST.Expression b) (SM.Expression )))
{- Passed! -}
{- Passed! -}
{- Passed! -}
testQuasiquote_AXEL_AUTOGENERATED_MACRO_DEFINITION _ = (pure [(assertEq (AST.Symbol (Just (SM.SourcePosition 1 46)) "topLevelBasic") (AST.Symbol Nothing "topLevelBasic")),(assertEq (AST.SExpression (Just (SM.SourcePosition 14 30)) (concat [[(AST.Symbol (Just (SM.SourcePosition 1 169)) "quote")],[(AST.Symbol (Just (SM.SourcePosition 1 178)) "topLevelQuote")]])) (AST.SExpression Nothing [(AST.Symbol Nothing "quote"),(AST.Symbol Nothing "topLevelQuote")])),(assertEq (AST.SExpression (Just (SM.SourcePosition 15 16)) (concat [[(AST.Symbol (Just (SM.SourcePosition 1 362)) "inFormBasic")],[(AST.Symbol Nothing "inFormUnquote")],(AST.toExpressionList [(AST.Symbol Nothing "inFormSpliceUnquote1"),(AST.Symbol Nothing "inFormSpliceUnquote2")]),[(AST.SExpression (Just (SM.SourcePosition 15 171)) (concat [[(AST.Symbol (Just (SM.SourcePosition 1 590)) "quote")],[(AST.Symbol (Just (SM.SourcePosition 1 599)) "inFormQuote")]]))]])) (AST.SExpression Nothing [(AST.Symbol Nothing "inFormBasic"),(AST.Symbol Nothing "inFormUnquote"),(AST.Symbol Nothing "inFormSpliceUnquote1"),(AST.Symbol Nothing "inFormSpliceUnquote2"),(AST.SExpression Nothing [(AST.Symbol Nothing "quote"),(AST.Symbol Nothing "inFormQuote")])]))])
testQuasiquote_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]