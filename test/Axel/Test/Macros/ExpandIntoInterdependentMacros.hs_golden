import Axel.Parse.AST as AST
shouldExist  = (pure ())
shouldExist :: (IO ())
generateMacroChain_AXEL_AUTOGENERATED_MACRO_DEFINITION [(AST.Symbol ann macro)] = (pure (let {macro1 = ((<>) macro "1");macro2 = ((<>) macro "2");macro3 = ((<>) macro "3")} in [(AST.SExpression (Just ((,) "" (SM.Position 5 7))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 201))) "defmacro")],[(AST.Symbol ann macro1)],[(AST.SExpression (Just ((,) "" (SM.Position 6 8))) (concat [[(AST.SExpression (Just ((,) "" (SM.Position 6 9))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 357))) "list")]]))],[(AST.SExpression (Just ((,) "" (SM.Position 6 12))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 429))) "pure")],[(AST.SExpression (Just ((,) "" (SM.Position 6 18))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 497))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 7 38))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 565))) "quote")],[(AST.SExpression (Just ((,) "" (SM.Position 6 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 634))) "def")],[(AST.Symbol (Just ((,) "" (SM.Position 1 641))) "shouldExist")],[(AST.SExpression (Just ((,) "" (SM.Position 6 37))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 716))) "IO")],[(AST.Symbol (Just ((,) "" (SM.Position 1 722))) "Unit")]]))],[(AST.SExpression (Just ((,) "" (SM.Position 7 21))) (concat [[(AST.SExpression (Just ((,) "" (SM.Position 7 22))) (concat []))],[(AST.SExpression (Just ((,) "" (SM.Position 7 25))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 919))) "pure")],[(AST.Symbol (Just ((,) "" (SM.Position 1 927))) "unit")]]))]]))]]))]]))]]))]]))]]))]])),(AST.SExpression (Just ((,) "" (SM.Position 8 7))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1024))) "defmacro")],[(AST.Symbol ann macro2)],[(AST.SExpression (Just ((,) "" (SM.Position 9 8))) (concat [[(AST.SExpression (Just ((,) "" (SM.Position 9 9))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1180))) "list")]]))],[(AST.SExpression (Just ((,) "" (SM.Position 9 12))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1252))) "pure")],[(AST.SExpression (Just ((,) "" (SM.Position 9 18))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1320))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 9 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1388))) "AST.SExpression")],[(AST.SExpression Nothing (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1442))) "Just")],[(AST.SExpression Nothing (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1485))) ",")],[(AST.LiteralString (Just ((,) "" (SM.Position 1 1490))) "")],[(AST.SExpression Nothing (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1531))) "SM.Position")],[(AST.LiteralInt (Just ((,) "" (SM.Position 1 1546))) 9)],[(AST.LiteralInt (Just ((,) "" (SM.Position 1 1551))) 20)]]))]]))]]))],[(AST.SExpression (Just ((,) "" (SM.Position 9 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1629))) "concat")],[(AST.SExpression (Just ((,) "" (SM.Position 9 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1699))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 9 47))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1767))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 9 47))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1835))) "quote")],[(AST.Symbol ann macro1)]]))]]))]]))]]))]]))]]))]]))]]))]])),(AST.SExpression (Just ((,) "" (SM.Position 10 7))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 1964))) "defmacro")],[(AST.Symbol ann macro3)],[(AST.SExpression (Just ((,) "" (SM.Position 11 8))) (concat [[(AST.SExpression (Just ((,) "" (SM.Position 11 9))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2122))) "list")]]))],[(AST.SExpression (Just ((,) "" (SM.Position 11 12))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2195))) "pure")],[(AST.SExpression (Just ((,) "" (SM.Position 11 18))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2264))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 11 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2333))) "AST.SExpression")],[(AST.SExpression Nothing (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2387))) "Just")],[(AST.SExpression Nothing (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2430))) ",")],[(AST.LiteralString (Just ((,) "" (SM.Position 1 2435))) "")],[(AST.SExpression Nothing (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2476))) "SM.Position")],[(AST.LiteralInt (Just ((,) "" (SM.Position 1 2491))) 11)],[(AST.LiteralInt (Just ((,) "" (SM.Position 1 2497))) 20)]]))]]))]]))],[(AST.SExpression (Just ((,) "" (SM.Position 11 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2576))) "concat")],[(AST.SExpression (Just ((,) "" (SM.Position 11 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2647))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 11 47))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2716))) "list")],[(AST.SExpression (Just ((,) "" (SM.Position 11 47))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 2785))) "quote")],[(AST.Symbol ann macro2)]]))]]))]]))]]))]]))]]))]]))]]))]]))]))
macros1_AXEL_AUTOGENERATED_MACRO_DEFINITION [] = (pure [(AST.SExpression (Just ((,) "" (SM.Position 1 1))) [(AST.Symbol (Just ((,) "" (SM.Position 1 2))) "="),(AST.Symbol (Just ((,) "" (SM.Position 1 4))) "shouldExist"),(AST.SExpression (Just ((,) "" (SM.Position 1 16))) []),(AST.SExpression (Just ((,) "" (SM.Position 1 19))) [(AST.Symbol (Just ((,) "" (SM.Position 1 20))) "pure"),(AST.Symbol (Just ((,) "" (SM.Position 1 25))) "unit")])]),(AST.SExpression (Just ((,) "" (SM.Position 2 1))) [(AST.Symbol (Just ((,) "" (SM.Position 2 2))) "::"),(AST.Symbol (Just ((,) "" (SM.Position 2 5))) "shouldExist"),(AST.SExpression (Just ((,) "" (SM.Position 2 17))) [(AST.Symbol (Just ((,) "" (SM.Position 2 18))) "IO"),(AST.Symbol (Just ((,) "" (SM.Position 2 21))) "Unit")])])])
macros2_AXEL_AUTOGENERATED_MACRO_DEFINITION [] = (pure [(AST.SExpression (Just ((,) "" (SM.Position 9 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 90))) "macros1")]]))])
macros3_AXEL_AUTOGENERATED_MACRO_DEFINITION [] = (pure [(AST.SExpression (Just ((,) "" (SM.Position 11 20))) (concat [[(AST.Symbol (Just ((,) "" (SM.Position 1 91))) "macros2")]]))])
generateMacroChain_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
macros1_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
macros2_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]
macros3_AXEL_AUTOGENERATED_MACRO_DEFINITION :: [AST.Expression SM.SourceMetadata] -> IO [AST.Expression SM.SourceMetadata]