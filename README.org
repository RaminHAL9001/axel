#+OPTIONS: num:nil toc:nil
* Lihsp [WIP]
  Haskell + Lisp + JVM/Node/... = Profit!
  Three great things for a language to have are:
  1. Haskell semantics, like Haskell
  2. Lisp syntax, like Clojure
  3. A large ecosystem such as the JVM's or Node's
  Each two of these features already exists in a different language:
  - 1 and 2: Hackett
  - 1 and 3: Eta
  - 2 and 3: Clojure (JVM)/ClojureScript (Node)/...
  But, there's nothing (that I'm aware of) for all three.
  Hence, meet Lihsp! It's a Lisp-like language (with macros and all) that transpiles to Eta, fulfilling all the requirements listed above. :tada:
** TODO
   - [ ] Quasiquoting
   - [ ] Self-quoting of integer literals, etc.
   - [ ] Full support of Haskell syntax (e.g. floating point number literals, lambdas, etc.)
   - [ ] Auto-wrap files with ~begin~
   - [ ] Documentation
   - [ ] Compile-time module system
   - [ ] Should case normalization come immediately before normalization rather than immediately after parsing?
   - [ ] Macro-ify common GHC extensions (e.g. ~LambdaCase~)
   - [ ] More robust error handling
   - [ ] Test suite
   - [ ] Explore Template Haskell integration
   - [ ] CLI
     - [ ] Target->Source error message reporting
   - [ ] Backends
     - [ ] Java (Eta)
     - [ ] JavaScript (PureScript)
   - [ ] Cleanup
     - [ ] Use recursion schemes ([[http://blog.sumtypeofway.com/recursion-schemes-part-41-2-better-living-through-base-functors/][automatic Template Haskell derivation]])
     - [ ] Use qualified imports exclusively (?)
     - [ ] Standardize use of ~($)~
     - [ ] Rename ~AST~ to ~Target~ (?) and ~Parse~ to ~Reader~ (?)
     - [ ] Merge ~AST.Literal~ into ~AST.Expression~
     - [ ] Rename ~Normalize~ to something more appropriate
** Code Style
   Use ~hindent~ to format code and ~hlint~ to catch errors.
** Structure
   The closest thing the app has to an entry point right now is ~transpileFile~ inside ~src/Lihsp/Transpile.hs~.
** Running
   Run ~scripts/build.sh~ to build the project, and ~stack exec lihsp-exe~ to run ~app/Main.hs~.
