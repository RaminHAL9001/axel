(module Main)
(import Axel.Eff.App (AppEffs runApp))
(import Axel.Eff.Console (putStrLn))
(import Axel.Eff.Ghci (withGhci))
(import Axel.Haskell.File (convertFileInPlace transpileFileInPlace))
(import Axel.Haskell.Project (buildProject runProject))
(import Axel.Haskell.Stack (axelStackageVersion))
(importq Axel.Parse.AST AST all)
(import Axel.Parse.Args ((Command Convert File Project Version) commandParser))
(import Control.Monad (void))
(importq Data.Map Map (empty))
(import Options.Applicative (<**> execParser helper info progDesc))
(importq Polysemy Sem all)
(importq Polysemy.State Sem all)
(raw "import Prelude hiding (putStrLn)")
(def app ((-> Command) (Sem.Sem AppEffs Unit)) (((Convert filePath)) (void (convertFileInPlace filePath))) (((File filePath)) (void (Sem.evalState Map.empty (withGhci (transpileFileInPlace filePath))))) (((Project)) (>> buildProject runProject)) (((Version)) (putStrLn (<> "Axel version " axelStackageVersion))))
(def main (IO Unit) (() (do' (<- modeCommand (execParser (info (<**> commandParser helper) (progDesc "The command to run.")))) (runApp (app modeCommand)))))
