(module Main)

(importq Prelude GHCPrelude all)
(importq Axel.Parse.AST AST all)
(import Axel.Eff.App (AppEffs runApp))
(import Axel.Eff.Console (putStrLn))
(import Axel.Eff.Ghci (withGhci))
(import Axel.Haskell.File
        (convertFileInPlace formatFileInPlace transpileFileInPlace))
(import Axel.Haskell.Project (buildProject convertProject formatProject runProject))
(import Axel.Haskell.Stack (axelStackageVersion))
(importq Axel.Parse.AST AST all)
(import Axel.Parse.Args
        ((Command FileCommand ProjectCommand Version)
         (FileCommand ConvertFile RunFile FormatFile)
         (ProjectCommand ConvertProject FormatProject RunProject)
         commandParserInfo))
(import Control.Monad (void))
(importq Data.Map Map (empty))
(import Options.Applicative (execParser))
(importq Polysemy Sem all)
(importq Polysemy.State Sem all)

(raw "import Prelude hiding (putStrLn)")

(def app ((-> Command) (Sem.Sem AppEffs Unit))
     (((FileCommand fileCommand))
      (case fileCommand
            ((ConvertFile filePath) (void (convertFileInPlace filePath)))
            ((FormatFile filePath) (formatFileInPlace filePath))
            ((RunFile filePath)
             (void
              (Sem.evalState Map.empty
                             (withGhci (transpileFileInPlace filePath)))))))
     (((ProjectCommand projectCommand))
      (case projectCommand (ConvertProject convertProject)
                           (FormatProject formatProject)
                           (RunProject (>> buildProject runProject))))
     (((Version))
      (putStrLn (<> "Axel version " axelStackageVersion))))

(def main (IO Unit)
     (() (>>= (execParser commandParserInfo)
              (\ (modeCommand) (runApp (app modeCommand))))))
