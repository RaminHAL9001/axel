(pragma "LANGUAGE DataKinds")
(pragma "LANGUAGE TypeApplications")
(module Main)
(raw "import Prelude hiding (putStrLn)")
(import Axel.Eff.App (AppEffs runApp))
(import Axel.Eff.Console (putStrLn))
(import Axel.Haskell.File (convertFileInPlace transpileFileInPlace))
(import Axel.Haskell.Project (buildProject runProject))
(import Axel.Haskell.Stack (axelStackageVersion))
(import Axel.Macros (ModuleInfo))
(import Axel.Parse.Args ((Command Convert File Project Version) commandParser))
(import Control.Monad (void))
(import Control.Monad.Freer.State (evalState))
(importq Data.Map Map (empty))
(import Options.Applicative (<**> execParser helper info progDesc))
(def app ((-> Command) (AppEffs Unit)) (((Convert filePath)) (void (convertFileInPlace filePath))) (((File filePath)) (void ((evalState (raw "@ModuleInfo") Map.empty) (transpileFileInPlace filePath)))) (((Project)) (>> buildProject runProject)) (((Version)) (putStrLn (<> "Axel version " axelStackageVersion))))
-- (def main (IO Unit) (() (raw "do { modeCommand <- execParser $ info (commandParser <**> helper) (progDesc \\\"The command to run.\\\"); runApp $ app modeCommand}")))
(def main (IO Unit)
 (()
  (do'
   {modeCommand <- (execParser (info {commandParser <*>> helper} (progDesc "The command to run.")))}
   (runApp modeCommand))))